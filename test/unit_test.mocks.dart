// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_content/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_storage/firebase_storage.dart' as _i6;
import 'package:flutter_content/flutter_content.dart' as _i5;
import 'package:flutter_content/src/model/model_repo.dart' as _i3;
import 'package:flutter_content/src/snippet/fs_folder_node.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFSFolderNode_0 extends _i1.SmartFake implements _i2.FSFolderNode {
  _FakeFSFolderNode_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IModelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockModelRepository extends _i1.Mock implements _i3.IModelRepository {
  @override
  _i4.Future<_i5.AppModel?> getAppInfo({required String? appName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppInfo,
          [],
          {#appName: appName},
        ),
        returnValue: _i4.Future<_i5.AppModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.AppModel?>.value(),
      ) as _i4.Future<_i5.AppModel?>);

  @override
  _i4.Future<_i5.CAPIModel?> getCAPIModel({
    required String? appName,
    required String? branchName,
    required int? modelVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCAPIModel,
          [],
          {
            #appName: appName,
            #branchName: branchName,
            #modelVersion: modelVersion,
          },
        ),
        returnValue: _i4.Future<_i5.CAPIModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.CAPIModel?>.value(),
      ) as _i4.Future<_i5.CAPIModel?>);

  @override
  _i4.Future<void> createOrUpdateAppInfoAndCAPIModel({
    required _i5.AppModel? appInfo,
    required _i5.CAPIModel? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateAppInfoAndCAPIModel,
          [],
          {
            #appInfo: appInfo,
            #model: model,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveVote({
    required String? pollName,
    required String? voterId,
    required String? optionId,
    required Map<String, int>? newOptionVoteCountMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveVote,
          [],
          {
            #pollName: pollName,
            #voterId: voterId,
            #optionId: optionId,
            #newOptionVoteCountMap: newOptionVoteCountMap,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<
      ({
        Map<String, int>? optionVoteCountMap,
        String? userVotedForOptionId,
        int? when
      })> getPollResultsForUser({
    required String? voterId,
    required String? appName,
    required String? pollName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPollResultsForUser,
          [],
          {
            #voterId: voterId,
            #appName: appName,
            #pollName: pollName,
          },
        ),
        returnValue: _i4.Future<
                ({
                  Map<String, int>? optionVoteCountMap,
                  String? userVotedForOptionId,
                  int? when
                })>.value(
            (optionVoteCountMap: null, userVotedForOptionId: null, when: null)),
        returnValueForMissingStub: _i4.Future<
                ({
                  Map<String, int>? optionVoteCountMap,
                  String? userVotedForOptionId,
                  int? when
                })>.value(
            (optionVoteCountMap: null, userVotedForOptionId: null, when: null)),
      ) as _i4.Future<
          ({
            Map<String, int>? optionVoteCountMap,
            String? userVotedForOptionId,
            int? when
          })>);

  @override
  _i4.Future<Map<String, List<String>>> getVotersByOption({
    required String? appName,
    required String? pollName,
    required List<String>? pollOptionIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVotersByOption,
          [],
          {
            #appName: appName,
            #pollName: pollName,
            #pollOptionIds: pollOptionIds,
          },
        ),
        returnValue: _i4.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
        returnValueForMissingStub: _i4.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
      ) as _i4.Future<Map<String, List<String>>>);

  @override
  _i4.Future<_i2.FSFolderNode> createAndPopulateFolderNode({
    required _i6.Reference? ref,
    _i2.FSFolderNode? parentNode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAndPopulateFolderNode,
          [],
          {
            #ref: ref,
            #parentNode: parentNode,
          },
        ),
        returnValue: _i4.Future<_i2.FSFolderNode>.value(_FakeFSFolderNode_0(
          this,
          Invocation.method(
            #createAndPopulateFolderNode,
            [],
            {
              #ref: ref,
              #parentNode: parentNode,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.FSFolderNode>.value(_FakeFSFolderNode_0(
          this,
          Invocation.method(
            #createAndPopulateFolderNode,
            [],
            {
              #ref: ref,
              #parentNode: parentNode,
            },
          ),
        )),
      ) as _i4.Future<_i2.FSFolderNode>);
}
