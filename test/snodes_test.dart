import 'package:flutter_content/src/model/alignment_enum_model.dart';
import 'package:flutter_content/src/model/color_model.dart';
import 'package:flutter_content/src/snippet/pnodes/groups/container_style_properties.dart';
import 'package:flutter_content/src/snippet/pnodes/groups/text_style_properties.dart';
import 'package:flutter_content/src/snippet/snode.dart';
import 'package:flutter_content/src/snippet/snodes/container_node.dart';
import 'package:flutter_content/src/snippet/snodes/edgeinsets_node_value.dart';
import 'package:flutter_content/src/snippet/snodes/row_node.dart';
import 'package:flutter_content/src/snippet/snodes/single_child_node.dart';
import 'package:flutter_content/src/snippet/snodes/text_node.dart';
import 'package:flutter_content/src/snippet/snodes/upto6colors.dart';
import 'package:flutter_test/flutter_test.dart';

// IMPORTANT: Import all your *.mapper.dart files here for initialization.
// This is the most critical step for dart_mappable to work in tests.
// ... add ALL other .mapper.dart imports ...

void main() {
  // This setup runs once before any tests in this file.
  // It ensures that all mappers are registered.
  setUpAll(() {
    // You can create a centralized init function or call them directly.
    // For simplicity in a single test file, direct calls are fine.
    SNodeMapper.ensureInitialized();
    SCMapper.ensureInitialized();
    ContainerNodeMapper.ensureInitialized();
    TextNodeMapper.ensureInitialized();
    RowNodeMapper.ensureInitialized();
    // ... call ensureInitialized() for every mapper ...
  });

  group('SNode Serialization Tests', () {
    test('ContainerNode serializes and deserializes correctly', () {
      // 1. Arrange: Create a complex node structure.
      final originalNode = ContainerNode(
        csPropGroup: ContainerStyleProperties(
          width: 150.0,
          height: 80.0,
          margin: EdgeInsetsValue(left: 8.0, right: 8.0, top: 8.0, bottom: 8.0),
          padding: EdgeInsetsValue(left: 16.0, right: 16.0, top: 4.0, bottom: 4.0),
          alignment: AlignmentEnum.center,
          fillColors: UpTo6Colors(color1: ColorModel.blue()), // Blue
          borderColors: UpTo6Colors(color1: ColorModel.black()), // Black
          borderThickness: 2.0,
          borderRadius: 12.0,
          radialGradient: true,
        ),
        child: TextNode(text: 'Test', tsPropGroup: TextStyleProperties()),
      );

      // 2. Act: Serialize the node to a JSON map and then deserialize it back.
      final jsonMap = originalNode.toMap();
      final decodedNode = ContainerNodeMapper.fromMap(jsonMap);

      // 3. Assert: Check if the decoded node is identical to the original.
      // The `==` operator generated by dart_mappable performs a deep comparison.
      expect(decodedNode, equals(originalNode));
    });

    test('RowNode with multiple children serializes and deserializes correctly', () {
      // 1. Arrange
      final originalNode = RowNode(
        children: [
          TextNode(text: 'Hello', tsPropGroup: TextStyleProperties()),
          ContainerNode(
            csPropGroup: ContainerStyleProperties(width: 50, height: 50),
            child: TextNode(text: 'World', tsPropGroup: TextStyleProperties()),
          ),
        ],
      );

      // 2. Act
      final jsonMap = originalNode.toMap();
      final decodedNode = RowNodeMapper.fromMap(jsonMap);

      // 3. Assert
      expect(decodedNode, equals(originalNode));
      expect(decodedNode.children.length, 2);
      expect(decodedNode.children[0], isA<TextNode>());
      expect((decodedNode.children[1] as ContainerNode).child, isA<TextNode>());
    });

    // Add more tests for other SNode types...
  });
}
