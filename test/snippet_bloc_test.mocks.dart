// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_content/test/snippet_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_content/flutter_content.dart' as _i5;
import 'package:flutter_content/src/bloc/capi_event.dart' as _i6;
import 'package:flutter_content/src/bloc/capi_state.dart' as _i3;
import 'package:flutter_content/src/model/model_repo.dart' as _i2;
import 'package:hydrated_bloc/hydrated_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIModelRepository_0 extends _i1.SmartFake
    implements _i2.IModelRepository {
  _FakeIModelRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCAPIState_1 extends _i1.SmartFake implements _i3.CAPIState {
  _FakeCAPIState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IModelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockModelRepository extends _i1.Mock implements _i2.IModelRepository {
  @override
  _i4.Future<_i5.CAPIModel?> getCAPIModel({required String? appName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCAPIModel,
          [],
          {#appName: appName},
        ),
        returnValue: _i4.Future<_i5.CAPIModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.CAPIModel?>.value(),
      ) as _i4.Future<_i5.CAPIModel?>);

  @override
  _i4.Future<void> createOrUpdateModel({required _i5.CAPIModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateModel,
          [],
          {#model: model},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveVote({
    required String? pollName,
    required String? voterId,
    required String? optionId,
    required Map<String, int>? newOptionVoteCountMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveVote,
          [],
          {
            #pollName: pollName,
            #voterId: voterId,
            #optionId: optionId,
            #newOptionVoteCountMap: newOptionVoteCountMap,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<
      ({
        Map<String, int>? optionVoteCountMap,
        String? userVotedForOptionId,
        int? when
      })> getPollResultsForUser({
    required String? voterId,
    required String? appName,
    required String? pollName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPollResultsForUser,
          [],
          {
            #voterId: voterId,
            #appName: appName,
            #pollName: pollName,
          },
        ),
        returnValue: _i4.Future<
                ({
                  Map<String, int>? optionVoteCountMap,
                  String? userVotedForOptionId,
                  int? when
                })>.value(
            (optionVoteCountMap: null, userVotedForOptionId: null, when: null)),
        returnValueForMissingStub: _i4.Future<
                ({
                  Map<String, int>? optionVoteCountMap,
                  String? userVotedForOptionId,
                  int? when
                })>.value(
            (optionVoteCountMap: null, userVotedForOptionId: null, when: null)),
      ) as _i4.Future<
          ({
            Map<String, int>? optionVoteCountMap,
            String? userVotedForOptionId,
            int? when
          })>);

  @override
  _i4.Future<Map<String, List<String>>> getVotersByOption({
    required String? appName,
    required String? pollName,
    required List<String>? pollOptionIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVotersByOption,
          [],
          {
            #appName: appName,
            #pollName: pollName,
            #pollOptionIds: pollOptionIds,
          },
        ),
        returnValue: _i4.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
        returnValueForMissingStub: _i4.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
      ) as _i4.Future<Map<String, List<String>>>);
}

/// A class which mocks [CAPIBloC].
///
/// See the documentation for Mockito's code generation for more information.
class MockCAPIBloC extends _i1.Mock implements _i5.CAPIBloC {
  @override
  _i2.IModelRepository get modelRepo => (super.noSuchMethod(
        Invocation.getter(#modelRepo),
        returnValue: _FakeIModelRepository_0(
          this,
          Invocation.getter(#modelRepo),
        ),
        returnValueForMissingStub: _FakeIModelRepository_0(
          this,
          Invocation.getter(#modelRepo),
        ),
      ) as _i2.IModelRepository);

  @override
  _i3.CAPIState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCAPIState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCAPIState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CAPIState);

  @override
  _i4.Stream<_i3.CAPIState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.CAPIState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.CAPIState>.empty(),
      ) as _i4.Stream<_i3.CAPIState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i6.CAPIEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.CAPIEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.CAPIState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.CAPIEvent>(
    _i7.EventHandler<E, _i3.CAPIState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i7.Transition<_i6.CAPIEvent, _i3.CAPIState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i7.Change<_i3.CAPIState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
